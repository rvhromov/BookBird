// <auto-generated />
using System;
using BookBird.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookBird.Infrastructure.EF.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20230216125758_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookBird.Infrastructure.Models.AuthorReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("164a4e84-1a4c-422e-ae25-67a98ba4ad91"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Walter",
                            LastName = "Isaacson",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("853eb8af-c5ed-4cb1-b5ef-c0542ea46388"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dan",
                            LastName = "Brown",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("bc93ac87-79e7-4387-a2f1-721ee0996f4d"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daniel",
                            LastName = "Whiteson",
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.BookReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishYear")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e215c9f9-6d1e-463a-8b1b-26400f70c719"),
                            AuthorId = new Guid("164a4e84-1a4c-422e-ae25-67a98ba4ad91"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Einstein: His Life and Universe",
                            PublishYear = 2007,
                            Rating = 0.0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("190d2d7c-b0c3-482e-b77d-162da24ec384"),
                            AuthorId = new Guid("164a4e84-1a4c-422e-ae25-67a98ba4ad91"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Benjamin Franklin: An American Life",
                            PublishYear = 2003,
                            Rating = 0.0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("221d28f8-ebaa-43cf-97d1-86a3e8053906"),
                            AuthorId = new Guid("164a4e84-1a4c-422e-ae25-67a98ba4ad91"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leonardo da Vinci",
                            PublishYear = 2017,
                            Rating = 0.0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("786718d9-0475-4e3b-a21b-494e9decd86e"),
                            AuthorId = new Guid("853eb8af-c5ed-4cb1-b5ef-c0542ea46388"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angels & Demons",
                            PublishYear = 2000,
                            Rating = 0.0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("bdc6a5b2-bd40-4cf9-8b7d-8e02b65660d4"),
                            AuthorId = new Guid("853eb8af-c5ed-4cb1-b5ef-c0542ea46388"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Da Vinci Code",
                            PublishYear = 2003,
                            Rating = 0.0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("3d364a37-b764-427b-a9fd-b7c862d9873d"),
                            AuthorId = new Guid("bc93ac87-79e7-4387-a2f1-721ee0996f4d"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "We Have No Idea: A Guide to the Unknown Universe",
                            PublishYear = 2017,
                            Rating = 0.0,
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.FeedbackReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.GenreReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc93ac87-79e7-4387-a2f1-721ee0996f4d"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A biography is a non-fictional account of a person's life. Biographies are written by an author who is not the subject/focus of the book.",
                            Name = "Biography",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("faef2407-569b-40bd-95be-fcf54d3293b3"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nonfiction is an account or representation of a subject which is presented as fact. This presentation may be accurate or not; that is, it can give either a true or a false account of the subject in question.",
                            Name = "Nonfiction",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("27d571bc-8559-435e-b886-1fc85717ad66"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fiction is the telling of stories which are not real. More specifically, fiction is an imaginative form of narrative, one of the four basic rhetorical modes.",
                            Name = "Fiction",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("93105d83-746a-4bb9-aac0-444b8fdc1ec9"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thrillers are characterized by fast pacing, frequent action, and resourceful heroes who must thwart the plans of more-powerful and better-equipped villains. Literary devices such as suspense, red herrings and cliffhangers are used extensively.",
                            Name = "Thriller",
                            Status = (byte)0
                        },
                        new
                        {
                            Id = new Guid("bf088d71-d618-40d5-a9db-15d65f1aa011"),
                            CreatedAt = new DateTime(2023, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Adventure fiction is a genre of fiction in which an adventure, an exciting undertaking involving risk and physical danger, forms the main storyline.",
                            Name = "Adventure",
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.InvitationReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InvitationStatus")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("Invitations", (string)null);
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.MeetingReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentNumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxNumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.MeetingVisitorReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MeetingVisitors", (string)null);
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BooksGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("e215c9f9-6d1e-463a-8b1b-26400f70c719"),
                            GenreId = new Guid("bc93ac87-79e7-4387-a2f1-721ee0996f4d")
                        },
                        new
                        {
                            BookId = new Guid("e215c9f9-6d1e-463a-8b1b-26400f70c719"),
                            GenreId = new Guid("faef2407-569b-40bd-95be-fcf54d3293b3")
                        },
                        new
                        {
                            BookId = new Guid("190d2d7c-b0c3-482e-b77d-162da24ec384"),
                            GenreId = new Guid("bc93ac87-79e7-4387-a2f1-721ee0996f4d")
                        },
                        new
                        {
                            BookId = new Guid("190d2d7c-b0c3-482e-b77d-162da24ec384"),
                            GenreId = new Guid("faef2407-569b-40bd-95be-fcf54d3293b3")
                        },
                        new
                        {
                            BookId = new Guid("221d28f8-ebaa-43cf-97d1-86a3e8053906"),
                            GenreId = new Guid("bc93ac87-79e7-4387-a2f1-721ee0996f4d")
                        },
                        new
                        {
                            BookId = new Guid("221d28f8-ebaa-43cf-97d1-86a3e8053906"),
                            GenreId = new Guid("faef2407-569b-40bd-95be-fcf54d3293b3")
                        },
                        new
                        {
                            BookId = new Guid("786718d9-0475-4e3b-a21b-494e9decd86e"),
                            GenreId = new Guid("27d571bc-8559-435e-b886-1fc85717ad66")
                        },
                        new
                        {
                            BookId = new Guid("786718d9-0475-4e3b-a21b-494e9decd86e"),
                            GenreId = new Guid("93105d83-746a-4bb9-aac0-444b8fdc1ec9")
                        },
                        new
                        {
                            BookId = new Guid("786718d9-0475-4e3b-a21b-494e9decd86e"),
                            GenreId = new Guid("bf088d71-d618-40d5-a9db-15d65f1aa011")
                        },
                        new
                        {
                            BookId = new Guid("bdc6a5b2-bd40-4cf9-8b7d-8e02b65660d4"),
                            GenreId = new Guid("27d571bc-8559-435e-b886-1fc85717ad66")
                        },
                        new
                        {
                            BookId = new Guid("bdc6a5b2-bd40-4cf9-8b7d-8e02b65660d4"),
                            GenreId = new Guid("93105d83-746a-4bb9-aac0-444b8fdc1ec9")
                        },
                        new
                        {
                            BookId = new Guid("bdc6a5b2-bd40-4cf9-8b7d-8e02b65660d4"),
                            GenreId = new Guid("bf088d71-d618-40d5-a9db-15d65f1aa011")
                        },
                        new
                        {
                            BookId = new Guid("3d364a37-b764-427b-a9fd-b7c862d9873d"),
                            GenreId = new Guid("faef2407-569b-40bd-95be-fcf54d3293b3")
                        });
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.BookReadModel", b =>
                {
                    b.HasOne("BookBird.Infrastructure.Models.AuthorReadModel", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.FeedbackReadModel", b =>
                {
                    b.HasOne("BookBird.Infrastructure.Models.BookReadModel", "Book")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.InvitationReadModel", b =>
                {
                    b.HasOne("BookBird.Infrastructure.Models.MeetingReadModel", "Meeting")
                        .WithMany("Invitations")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookBird.Infrastructure.Models.UserReadModel", "User")
                        .WithMany("Invitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.MeetingReadModel", b =>
                {
                    b.HasOne("BookBird.Infrastructure.Models.UserReadModel", "Owner")
                        .WithMany("OwnMeetings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.MeetingVisitorReadModel", b =>
                {
                    b.HasOne("BookBird.Infrastructure.Models.MeetingReadModel", "Meeting")
                        .WithMany("Visitors")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookBird.Infrastructure.Models.UserReadModel", "User")
                        .WithOne()
                        .HasForeignKey("BookBird.Infrastructure.Models.MeetingVisitorReadModel", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookBird.Infrastructure.Models.BookReadModel", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookBird.Infrastructure.Models.GenreReadModel", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.AuthorReadModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.BookReadModel", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.MeetingReadModel", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("BookBird.Infrastructure.Models.UserReadModel", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("OwnMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
